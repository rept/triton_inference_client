=begin
#Data Plane

#https://github.com/kubeflow/kfserving/blob/master/docs/predict-api/v2/required_api.md

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'cgi'

module TritonInferenceClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Server Metadata
    # The server metadata endpoint provides information about the server. A server metadata request is made with an HTTP GET to a server metadata endpoint. In the corresponding response the HTTP body contains the [Server Metadata Response JSON Object](#server-metadata-response-json-object) or the [Server Metadata Response JSON Error Object](#server-metadata-response-json-error-object).
    # @param [Hash] opts the optional parameters
    # @return [MetadataServerResponse]
    def get_v2(opts = {})
      data, _status_code, _headers = get_v2_with_http_info(opts)
      data
    end

    # Server Metadata
    # The server metadata endpoint provides information about the server. A server metadata request is made with an HTTP GET to a server metadata endpoint. In the corresponding response the HTTP body contains the [Server Metadata Response JSON Object](#server-metadata-response-json-object) or the [Server Metadata Response JSON Error Object](#server-metadata-response-json-error-object).
    # @param [Hash] opts the optional parameters
    # @return [Array<(MetadataServerResponse, Integer, Hash)>] MetadataServerResponse data, response status code and response headers
    def get_v2_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_v2 ...'
      end
      # resource path
      local_var_path = '/v2/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetadataServerResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Server Live
    # The “server live” API indicates if the inference server is able to receive and respond to metadata and inference requests. The “server live” API can be used directly to implement the Kubernetes livenessProbe.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v2_health_live(opts = {})
      get_v2_health_live_with_http_info(opts)
      nil
    end

    # Server Live
    # The “server live” API indicates if the inference server is able to receive and respond to metadata and inference requests. The “server live” API can be used directly to implement the Kubernetes livenessProbe.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v2_health_live_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_v2_health_live ...'
      end
      # resource path
      local_var_path = '/v2/health/live'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_v2_health_live",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_v2_health_live\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Server Ready
    # The “server ready” health API indicates if all the models are ready for inferencing. The “server ready” health API can be used directly to implement the Kubernetes readinessProbe.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v2_health_ready(opts = {})
      get_v2_health_ready_with_http_info(opts)
      nil
    end

    # Server Ready
    # The “server ready” health API indicates if all the models are ready for inferencing. The “server ready” health API can be used directly to implement the Kubernetes readinessProbe.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v2_health_ready_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_v2_health_ready ...'
      end
      # resource path
      local_var_path = '/v2/health/ready'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_v2_health_ready",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_v2_health_ready\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Model Metadata
    # The per-model metadata endpoint provides information about a model. A model metadata request is made with an HTTP GET to a model metadata endpoint. In the corresponding response the HTTP body contains the [Model Metadata Response JSON Object](#model-metadata-response-json-object) or the [Model Metadata Response JSON Error Object](#model-metadata-response-json-error-object). The model name and (optionally) version must be available in the URL. If a version is not provided the server may choose a version based on its own policies or return an error.
    # @param model_name [String] 
    # @param model_version [String] 
    # @param [Hash] opts the optional parameters
    # @return [MetadataModelResponse]
    def get_v2_models_model_name_versions_model_version(model_name, model_version, opts = {})
      data, _status_code, _headers = get_v2_models_model_name_versions_model_version_with_http_info(model_name, model_version, opts)
      data
    end

    # Model Metadata
    # The per-model metadata endpoint provides information about a model. A model metadata request is made with an HTTP GET to a model metadata endpoint. In the corresponding response the HTTP body contains the [Model Metadata Response JSON Object](#model-metadata-response-json-object) or the [Model Metadata Response JSON Error Object](#model-metadata-response-json-error-object). The model name and (optionally) version must be available in the URL. If a version is not provided the server may choose a version based on its own policies or return an error.
    # @param model_name [String] 
    # @param model_version [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MetadataModelResponse, Integer, Hash)>] MetadataModelResponse data, response status code and response headers
    def get_v2_models_model_name_versions_model_version_with_http_info(model_name, model_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_v2_models_model_name_versions_model_version ...'
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.get_v2_models_model_name_versions_model_version"
      end
      # verify the required parameter 'model_version' is set
      if @api_client.config.client_side_validation && model_version.nil?
        fail ArgumentError, "Missing the required parameter 'model_version' when calling DefaultApi.get_v2_models_model_name_versions_model_version"
      end
      # resource path
      local_var_path = '/v2/models/${MODEL_NAME}/versions/${MODEL_VERSION}'.sub('{' + 'MODEL_NAME' + '}', CGI.escape(model_name.to_s)).sub('{' + 'MODEL_VERSION' + '}', CGI.escape(model_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetadataModelResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_v2_models_model_name_versions_model_version",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_v2_models_model_name_versions_model_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Model Ready
    # The “model ready” health API indicates if a specific model is ready for inferencing. The model name and (optionally) version must be available in the URL. If a version is not provided the server may choose a version based on its own policies.
    # @param model_name [String] 
    # @param model_version [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v2_models_model_name_versions_model_version_ready(model_name, model_version, opts = {})
      get_v2_models_model_name_versions_model_version_ready_with_http_info(model_name, model_version, opts)
      nil
    end

    # Model Ready
    # The “model ready” health API indicates if a specific model is ready for inferencing. The model name and (optionally) version must be available in the URL. If a version is not provided the server may choose a version based on its own policies.
    # @param model_name [String] 
    # @param model_version [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v2_models_model_name_versions_model_version_ready_with_http_info(model_name, model_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_v2_models_model_name_versions_model_version_ready ...'
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.get_v2_models_model_name_versions_model_version_ready"
      end
      # verify the required parameter 'model_version' is set
      if @api_client.config.client_side_validation && model_version.nil?
        fail ArgumentError, "Missing the required parameter 'model_version' when calling DefaultApi.get_v2_models_model_name_versions_model_version_ready"
      end
      # resource path
      local_var_path = '/v2/models/${MODEL_NAME}/versions/${MODEL_VERSION}/ready'.sub('{' + 'MODEL_NAME' + '}', CGI.escape(model_name.to_s)).sub('{' + 'MODEL_VERSION' + '}', CGI.escape(model_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_v2_models_model_name_versions_model_version_ready",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_v2_models_model_name_versions_model_version_ready\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Inference
    # An inference request is made with an HTTP POST to an inference endpoint. In the request the HTTP body contains the [Inference Request JSON Object](#inference-request-json-object). In the corresponding response the HTTP body contains the [Inference Response JSON Object](#inference-response-json-object) or [Inference Response JSON Error Object](#inference-response-json-error-object). See [Inference Request Examples](#inference-request-examples) for some example HTTP/REST requests and responses.
    # @param model_name [String] 
    # @param model_version [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [InferenceRequest] :inference_request 
    # @return [InferenceResponse]
    def post_v2_models_modelname_versions_modelversion_infer(model_name, model_version, opts = {})
      data, _status_code, _headers = post_v2_models_modelname_versions_modelversion_infer_with_http_info(model_name, model_version, opts)
      data
    end

    # Inference
    # An inference request is made with an HTTP POST to an inference endpoint. In the request the HTTP body contains the [Inference Request JSON Object](#inference-request-json-object). In the corresponding response the HTTP body contains the [Inference Response JSON Object](#inference-response-json-object) or [Inference Response JSON Error Object](#inference-response-json-error-object). See [Inference Request Examples](#inference-request-examples) for some example HTTP/REST requests and responses.
    # @param model_name [String] 
    # @param model_version [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [InferenceRequest] :inference_request 
    # @return [Array<(InferenceResponse, Integer, Hash)>] InferenceResponse data, response status code and response headers
    def post_v2_models_modelname_versions_modelversion_infer_with_http_info(model_name, model_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_v2_models_modelname_versions_modelversion_infer ...'
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.post_v2_models_modelname_versions_modelversion_infer"
      end
      # verify the required parameter 'model_version' is set
      if @api_client.config.client_side_validation && model_version.nil?
        fail ArgumentError, "Missing the required parameter 'model_version' when calling DefaultApi.post_v2_models_modelname_versions_modelversion_infer"
      end
      # resource path
      local_var_path = '/v2/models/${MODEL_NAME}/versions/${MODEL_VERSION}/infer'.sub('{' + 'MODEL_NAME' + '}', CGI.escape(model_name.to_s)).sub('{' + 'MODEL_VERSION' + '}', CGI.escape(model_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'inference_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'InferenceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.post_v2_models_modelname_versions_modelversion_infer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_v2_models_modelname_versions_modelversion_infer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
