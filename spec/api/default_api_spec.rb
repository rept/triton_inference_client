=begin
#Data Plane

#https://github.com/kubeflow/kfserving/blob/master/docs/predict-api/v2/required_api.md

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'spec_helper'
require 'json'

# Unit tests for TritonInferenceClient::DefaultApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'DefaultApi' do
  before do
    # run before each test
    @api_instance = TritonInferenceClient::DefaultApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instance of DefaultApi' do
      expect(@api_instance).to be_instance_of(TritonInferenceClient::DefaultApi)
    end
  end

  # unit tests for get_v2
  # Server Metadata
  # The server metadata endpoint provides information about the server. A server metadata request is made with an HTTP GET to a server metadata endpoint. In the corresponding response the HTTP body contains the [Server Metadata Response JSON Object](#server-metadata-response-json-object) or the [Server Metadata Response JSON Error Object](#server-metadata-response-json-error-object).
  # @param [Hash] opts the optional parameters
  # @return [MetadataServerResponse]
  describe 'get_v2 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_v2_health_live
  # Server Live
  # The “server live” API indicates if the inference server is able to receive and respond to metadata and inference requests. The “server live” API can be used directly to implement the Kubernetes livenessProbe.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_v2_health_live test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_v2_health_ready
  # Server Ready
  # The “server ready” health API indicates if all the models are ready for inferencing. The “server ready” health API can be used directly to implement the Kubernetes readinessProbe.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_v2_health_ready test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_v2_models_model_name_versions_model_version
  # Model Metadata
  # The per-model metadata endpoint provides information about a model. A model metadata request is made with an HTTP GET to a model metadata endpoint. In the corresponding response the HTTP body contains the [Model Metadata Response JSON Object](#model-metadata-response-json-object) or the [Model Metadata Response JSON Error Object](#model-metadata-response-json-error-object). The model name and (optionally) version must be available in the URL. If a version is not provided the server may choose a version based on its own policies or return an error.
  # @param model_name 
  # @param model_version 
  # @param [Hash] opts the optional parameters
  # @return [MetadataModelResponse]
  describe 'get_v2_models_model_name_versions_model_version test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_v2_models_model_name_versions_model_version_ready
  # Model Ready
  # The “model ready” health API indicates if a specific model is ready for inferencing. The model name and (optionally) version must be available in the URL. If a version is not provided the server may choose a version based on its own policies.
  # @param model_name 
  # @param model_version 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_v2_models_model_name_versions_model_version_ready test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_v2_models_modelname_versions_modelversion_infer
  # Inference
  # An inference request is made with an HTTP POST to an inference endpoint. In the request the HTTP body contains the [Inference Request JSON Object](#inference-request-json-object). In the corresponding response the HTTP body contains the [Inference Response JSON Object](#inference-response-json-object) or [Inference Response JSON Error Object](#inference-response-json-error-object). See [Inference Request Examples](#inference-request-examples) for some example HTTP/REST requests and responses.
  # @param model_name 
  # @param model_version 
  # @param [Hash] opts the optional parameters
  # @option opts [InferenceRequest] :inference_request 
  # @return [InferenceResponse]
  describe 'post_v2_models_modelname_versions_modelversion_infer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
